// Generated by CoffeeScript 1.6.2
(function() {
  var MongoStore, connectMongo, dashboardRouter, db, express, hbs, logger, mongoose, profileRouter;

  express = require('express');

  connectMongo = require('connect-mongo');

  MongoStore = connectMongo(express);

  logger = require('./services/logger.js').logger;

  dashboardRouter = require('./routes/dashboard.js');

  profileRouter = require('./routes/profile.js');

  mongoose = require('mongoose');

  hbs = require('hbs');

  db = require('./services/db.js');

  exports.configure = function(Express, app) {
    var NotFound;

    app.configure(function() {
      logger.info('Configuring application...');
      app.use(Express.logger({
        buffer: true
      }));
      app.use(Express.methodOverride());
      app.use(Express.bodyParser());
      app.use(Express.cookieParser());
      app.use(Express.session({
        secret: 'thirstier thirster',
        store: new MongoStore({
          db: 'brewtheory'
        })
      }));
      app.use(Express.responseTime());
      dashboardRouter.routes(app);
      profileRouter.routes(app);
      app.set("view engine", "hbs");
      app.set("views", "../views/");
      hbs.registerHelper('json', function(context) {
        return JSON.stringify(context);
      });
      app.set('log', 'logs/rpi-ferment-frontend.log');
      db.establishConnection();
    });
    app.configure('development', function() {
      logger.info('Configuring development mode...');
      app.use(Express["static"](__dirname + '/../public'));
      app.use(Express.errorHandler({
        dumpExceptions: true,
        showStack: true
      }));
    });
    app.configure('production', function() {
      var oneYear;

      logger.info('Configuring production mode...');
      oneYear = 31557600000;
      app.use(Express["static"](__dirname + '/../public', {
        maxAge: oneYear
      }));
      app.use(Express.errorHandler);
    });
    NotFound = function(msg) {
      this.name = 'NotFound';
      logger.info('Not Found - ' + msg);
      Error.call(this, msg);
      Error.captureStackTrace(this, arguments.callee);
    };
    NotFound.prototype.__proto__ = Error.prototype;
    app.get('/404', function(req, res) {
      throw new NotFound('page not found');
    });
    app.get('/500', function(req, res) {
      throw new Error('keyboard cat!');
    });
    return app.use(function(err, req, res, next) {
      logger.error(err);
      if (err instanceof NotFound) {
        res.render('404.hbs');
      } else {
        res.render('500.hbs', {
          error: err
        });
      }
    });
  };

}).call(this);
